#!/usr/bin/python3
import actfw_core
from actfw_core.task import Isolated
import time
import smbus2  # require pip install
from sensor.VEML7700 import VEML7700
from sensor.SHT3x import SHT3x
from sensor.Omron2smpd02e import Omron2smpd02e


class Reader(Isolated):
    def __init__(self, interval,i2c_device_path):
        super().__init__()
        self.interval = interval

        addr_veme7700 = 0x10
        addr_SHT3x = 0x44
        addr_2SMPB = 0x70
        invalid_sensor_count = 0
        try:
            self.sensor_VEML7700 = VEML7700(addr_veme7700,i2c_device_path)
        except Exception as e:
            actfw_core.notify([{"invalid_sensors": "VEML7700"}])
            actfw_core.notify([{"i2cerror": str(e)}])
            invalid_sensor_count += 1

        try:
            self.sensor_SHT3x = SHT3x(addr_SHT3x,i2c_device_path)
        except Exception as e:
            actfw_core.notify([{"invalid_sensors": "SHT3x"}])
            actfw_core.notify([{"i2cerror": str(e)}])
            invalid_sensor_count += 1

        try:
            self.sensor_Omron2smpd02e = Omron2smpd02e(addr_2SMPB,i2c_device_path)
        except Exception as e:
            actfw_core.notify([{"invalid_sensors": "Omron2smpd02e"}])
            actfw_core.notify([{"i2cerror": str(e)}])
            invalid_sensor_count += 1

        if invalid_sensor_count == 3:
            actfw_core.notify(
                [
                    {
                        "HAT_Error": "Errors were detected in all sensors. There might be no HAT sensor connected, or the 'Enable I2C' setting in the actcast writer's Advanced Settings might not be turned on."
                    }
                ]
            )

    def _read_sensors(self):
        timestamp = time.time()
        invalid_score = -9999

        sensor_data = {
            "timestamp": timestamp,
            "ambient": invalid_score,
            "pressure": invalid_score,
            "temperature": invalid_score,
            "humidity": invalid_score,
            "invalid_sensors": [],
        }

        try:
            ambient_light = self.sensor_VEML7700.readData()
            sensor_data["ambient"] = ambient_light
        except Exception as e:
            sensor_data["invalid_sensors"].append("VEML7700")

        try:
            pressure, temp = self.sensor_Omron2smpd02e.readData()
            sensor_data["pressure"] = pressure
            sensor_data["temperature"] = temp
        except Exception as e:
            sensor_data["invalid_sensors"].append("Omron2smpd02e")

        try:
            data = self.sensor_SHT3x.readData()
            sensor_data["temperature"] = round(data[0], 1)
            sensor_data["humidity"] = round(data[1], 1)
        except Exception as e:
            sensor_data["invalid_sensors"].append("SHT3x")

        return sensor_data

    def run(self):
        # To gracefully stop, check self.running periodically
        remaining_seconds = 0
        while self.running:
            actfw_core.heartbeat()
            if remaining_seconds == 0:
                sensor_data = self._read_sensors()
                actfw_core.notify([{"KSY_SmartSensor": sensor_data}])
                remaining_seconds = self.interval
            remaining_seconds -= 1
            time.sleep(1)

def main():
    app = actfw_core.Application()

    settings = app.get_settings({"send_interval": 60})
    interval = settings["send_interval"]

    i2c_device_path = settings.get("i2c_device_path")
    
    app.register_task(Reader(interval,i2c_device_path))
    app.run()


if __name__ == "__main__":
    main()
