#!/usr/bin/env python3

import time
from PIL import Image, ImageDraw, ImageFont
import actfw_core
from actfw_core.system import (
    get_actcast_firmware_type,
    find_csi_camera_device,
    find_usb_camera_device,
)
from actfw_core.task import Consumer
from actfw_core.capture import V4LCameraCapture
from actfw_core.unicam_isp_capture import UnicamIspCapture
from actfw_raspberrypi.vc4 import Display


(CAPTURE_WIDTH, CAPTURE_HEIGHT) = (640, 480)  # capture image size
FRAMERATE = 30  # frame rate


def setup_camera_capture(use_usb_camera):
    device = find_usb_camera_device() if use_usb_camera else find_csi_camera_device()

    if get_actcast_firmware_type() == "raspberrypi-bullseye" and not use_usb_camera:
        # Use UnicamIspCapture on Raspberry Pi OS Bullseye
        cap = UnicamIspCapture(
            unicam=device, size=(CAPTURE_WIDTH, CAPTURE_HEIGHT), framerate=FRAMERATE
        )
    else:
        # Use V4LCameraCapture on Raspberry Pi OS Buster or use USB camera
        cap = V4LCameraCapture(
            device,
            (CAPTURE_WIDTH, CAPTURE_HEIGHT),
            FRAMERATE,
            format_selector=V4LCameraCapture.FormatSelector.PROPER,
        )

    return cap


class Presenter(Consumer):

    def __init__(self, capture_size, preview_window, cmd, local_video_server):
        super(Presenter, self).__init__()
        self.capture_size = capture_size
        self.preview_window = preview_window
        self.cmd = cmd
        self.local_video_server = local_video_server
        self.font = ImageFont.truetype(
            font="/usr/share/fonts/truetype/dejavu/DejaVuSansMono-Bold.ttf", size=24
        )
        self.prev_time = time.time()
        self.diffs = []
        self.diff_max = 30

    def proc(self, frame):
        rgb_image = Image.frombuffer(
            "RGB", self.capture_size, frame.getvalue(), "raw", "RGB"
        )
        rgb_image = rgb_image.resize((CAPTURE_WIDTH, CAPTURE_HEIGHT))
        self.update_fps()
        self.draw_fps(rgb_image, self.get_fps())

        self.cmd.update_image(rgb_image)  # update `Take Photo` image
        if self.local_video_server is not None:
            self.local_video_server.update_image(
                rgb_image
            )  # update local video server image
        if self.preview_window is not None:
            self.preview_window.blit(rgb_image.tobytes())
            self.preview_window.update()
        actfw_core.heartbeat()

    def get_fps(self):
        return 1 / (sum(self.diffs) / len(self.diffs))

    def update_fps(self):
        current_time = time.time()
        self.diffs.append(current_time - self.prev_time)
        if len(self.diffs) > self.diff_max:
            self.diffs.pop(0)
        self.prev_time = current_time

    def draw_fps(self, rgb_image, fps):
        draw = ImageDraw.Draw(rgb_image)
        text = f"FPS: {fps:.2f}"
        margin = 5
        position = (margin * 2, margin)
        left, top, right, bottom = draw.textbbox(position, text, font=self.font)
        draw.rectangle(
            (left - margin, top - margin, right + margin, bottom + margin),
            fill="black",
        )
        draw.text(
            position,
            text,
            font=self.font,
            fill="white",
        )


def main():
    # Actcast application
    app = actfw_core.Application()

    # Load act setting
    settings = app.get_settings(
        {
            "display": False,
            "use_usb_camera": False,
            "local_video_server": True,
            "quality": 75,
        }
    )

    # CommandServer (for `Take Photo` command)
    cmd = actfw_core.CommandServer()
    app.register_task(cmd)

    # LocalVideoServer
    local_video_server = None
    if settings["local_video_server"]:
        local_video_server = actfw_core.LocalVideoServer(quality=settings["quality"])
        app.register_task(local_video_server)

    cap = setup_camera_capture(settings["use_usb_camera"])
    capture_size = cap.capture_size()
    app.register_task(cap)

    def run(preview_window=None):

        # Presentation task
        pres = Presenter(capture_size, preview_window, cmd, local_video_server)
        app.register_task(pres)

        # Make task connection
        cap.connect(pres)  # from `cap` to `pres`

        # Start application
        app.run()

    if settings["display"]:
        with Display() as display:
            display_width, display_height = display.size()
            scale = min(
                float(display_width / CAPTURE_WIDTH),
                float(display_height / CAPTURE_WIDTH),
            )
            width = int(scale * CAPTURE_WIDTH)
            height = int(scale * CAPTURE_HEIGHT)
            left = (display_width - width) // 2
            upper = (display_height - height) // 2
            # layer must be between 1 and 16
            layer = 16
            with display.open_window(
                (left, upper, width, height), (CAPTURE_WIDTH, CAPTURE_HEIGHT), layer
            ) as preview_window:
                run(preview_window)
    else:
        run()


if __name__ == "__main__":
    main()
